(lambda (fixedparam ($lst "x" ($nil 0))) (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))))

(apply (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))) ($nil 0) (define-prim "+" (varparam "lst")) (fixedarg ($lst (f-addr ($nil 0) (int "1")) ($lst (f-addr ($nil 0) (int "2")) ($nil 0)))) (k-addr (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0))))))
(apply (app (ref "call") ($lst (int "1") ($nil 0))) ($nil 0) (clo (lambda (fixedparam ($lst "x" ($nil 0))) (app (ref "+") ($lst (int "1") ($lst (int #int_1) ($nil #$nil_0))))) ($nil 0)) (fixedarg ($lst (f-addr ($nil 0) (int "1")) ($nil 0))) (halt ))
(apply (app (ref "call") ($lst (int "1") ($nil 0))) ($nil 0) (define "call" (fixedparam ($lst "x" ($nil 0))) (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0))))) (fixedarg ($lst (f-addr ($nil 0) (int "1")) ($nil 0))) (halt ))

(fixedparam ($nil 0))
(fixedparam ($lst "x" ($nil 0)))


(free "call" (ref "call"))
(free "call" (app (ref "call") ($lst (int "1") ($nil 0))))
(free "+" (lambda (fixedparam ($lst "x" ($nil 0))) (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0))))))
(free "+" (ref "+"))
(free "+" (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))))



(halt )

(define "brouhaha_main" (fixedparam ($nil 0)) (app (ref "call") ($lst (int "1") ($nil 0))))
(define "call" (fixedparam ($lst "x" ($nil 0))) (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))))
(do-free-lam (lambda (fixedparam ($lst "x" ($nil 0))) (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0))))) ($nil 0) "+")
(do-free-lam (lambda (fixedparam ($lst "x" ($nil 0))) (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0))))) ($lst "x" ($nil 0)) "+")

(int-val "1")
(int-val "2")


(prim-count "float->int" ($lst 1 ($nil 0)))
(prim-count "symbol?" ($lst 1 ($nil 0)))
(prim-count "list->set" ($lst 1 ($nil 0)))
(prim-count "int->float" ($lst 1 ($nil 0)))
(prim-count "string->list" ($lst 1 ($nil 0)))
(prim-count "random" ($lst 1 ($lst 2 ($nil 0))))
(prim-count "car" ($lst 1 ($nil 0)))
(prim-count ">=" ($lst 1 ($lst 2 ($lst 3 ($nil 0)))))
(prim-count "hash-keys" ($lst 1 ($nil 0)))
(prim-count "/" ($lst 1 ($lst 2 ($lst 3 ($nil 0)))))
(prim-count "set-count" ($lst 1 ($nil 0)))
(prim-count "null?" ($lst 1 ($nil 0)))
(prim-count "set->list" ($lst 1 ($nil 0)))
(prim-count "exact-floor" ($lst 1 ($nil 0)))
(prim-count "*" ($lst 1 ($lst 2 ($lst 3 ($nil 0)))))
(prim-count "hash" ($nil 0))
(prim-count "set" ($nil 0))
(prim-count "exact-ceiling" ($lst 1 ($nil 0)))
(prim-count "positive?" ($lst 1 ($nil 0)))
(prim-count "<=" ($lst 1 ($lst 2 ($lst 3 ($nil 0)))))
(prim-count "string?" ($lst 1 ($nil 0)))
(prim-count "string-append" ($lst 2 ($nil 0)))
(prim-count "sqrt" ($lst 1 ($nil 0)))
(prim-count "set-member?" ($lst 2 ($nil 0)))
(prim-count "substring" ($lst 3 ($nil 0)))
(prim-count "expt" ($lst 2 ($nil 0)))
(prim-count "set-add" ($lst 2 ($nil 0)))
(prim-count "list" ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($nil 0))))))
(prim-count "remainder" ($lst 2 ($nil 0)))
(prim-count ">" ($lst 1 ($lst 2 ($lst 3 ($nil 0)))))
(prim-count "min" ($lst 1 ($nil 0)))
(prim-count "hash-has-key?" ($lst 2 ($nil 0)))
(prim-count "set-remove" ($lst 2 ($nil 0)))
(prim-count "abs" ($lst 1 ($nil 0)))
(prim-count "negative?" ($lst 1 ($nil 0)))
(prim-count "hash-ref" ($lst 2 ($nil 0)))
(prim-count "hash-set" ($lst 3 ($nil 0)))
(prim-count "pair?" ($lst 1 ($nil 0)))
(prim-count "hash-count" ($lst 1 ($nil 0)))
(prim-count "eq?" ($lst 2 ($nil 0)))
(prim-count "modulo" ($lst 2 ($nil 0)))
(prim-count "quotient" ($lst 2 ($nil 0)))
(prim-count "equal?" ($lst 2 ($nil 0)))
(prim-count "cdr" ($lst 1 ($nil 0)))
(prim-count "-" ($lst 1 ($lst 2 ($lst 3 ($nil 0)))))
(prim-count "+" ($lst 1 ($lst 2 ($lst 3 ($nil 0)))))
(prim-count "=" ($lst 1 ($lst 2 ($lst 3 ($nil 0)))))
(prim-count "cons" ($lst 2 ($nil 0)))
(prim-count "string-ref" ($lst 2 ($nil 0)))
(prim-count "exact-round" ($lst 1 ($nil 0)))
(prim-count "<" ($lst 1 ($lst 2 ($lst 3 ($nil 0)))))
(prim-count "max" ($lst 1 ($nil 0)))
(prim-count "string-length" ($lst 1 ($nil 0)))
(ret (f-addr ($nil 0) "call") (appk (app (ref "call") ($lst (int "1") ($nil 0))) ($nil 0) ($lst (int "1") ($nil 0)) ($nil 0) (halt )))
(ret (f-addr ($nil 0) "+") (appk (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))) ($nil 0) ($lst (int "1") ($lst (int "2") ($nil 0))) ($nil 0) (k-addr (app (ref "+") ($lst (int "1") ($lst (int #int_1) ($nil #$nil_0)))))))
(ret (f-addr ($nil 0) (int "1")) (appk (app (ref "call") ($lst (int "1") ($nil 0))) ($lst (f-addr ($nil 0) "call") ($nil 0)) ($nil 0) ($nil 0) (halt )))
(ret (f-addr ($nil 0) (int "1")) (appk (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))) ($lst (f-addr ($nil 0) "+") ($nil 0)) ($lst (int "2") ($nil 0)) ($nil 0) (k-addr (app (ref "+") ($lst (int "1") ($lst (int #int_1) ($nil #$nil_0)))))))
(ret (f-addr ($nil 0) (int "2")) (appk (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))) ($lst (f-addr ($nil 0) "+") ($lst (f-addr ($nil 0) (int "1")) ($nil 0))) ($nil 0) ($nil 0) (k-addr (app (ref "+") ($lst (int "1") ($lst (int #int_1) ($nil #$nil_0)))))))
(ret (s-addr (apply (app (ref "+") ($lst (int "1") ($lst (int #int_1) ($nil #$nil_0)))) ($nil 0) (define-prim "+" (varparam "lst")) (fixedarg ($lst (f-addr ($nil #$nil_0) (int #int_0)) ($lst (f-addr #f-addr_58) ($nil #$nil_0)))) (k-addr (app (ref "+") ($lst (int #int_0) ($lst #$lst_3)))))) (halt ))
(ret (s-addr (apply (app (ref "+") ($lst (int "1") ($lst (int #int_1) ($nil #$nil_0)))) ($nil 0) (define-prim "+" (varparam "lst")) (fixedarg ($lst (f-addr ($nil #$nil_0) (int #int_0)) ($lst (f-addr #f-addr_58) ($nil #$nil_0)))) (k-addr (app (ref "+") ($lst (int #int_0) ($lst #$lst_3)))))) (k-addr (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0))))))


(length (length-input ($nil 0)) 0)
(state (apply (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))) ($nil 0) (define-prim "+" (varparam "lst")) (fixedarg ($lst (f-addr ($nil 0) (int "1")) ($lst (f-addr ($nil #$nil_0) (int #int_1)) ($nil 0)))) (k-addr (app (ref "+") ($lst (int "1") ($lst (int #int_1) ($nil #$nil_0)))))))
(app (ref "call") ($lst (int "1") ($nil 0)))
(app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0))))


(define-prim "float->int" (varparam "lst"))
(define-prim "symbol?" (varparam "lst"))
(define-prim "list->set" (varparam "lst"))
(define-prim "int->float" (varparam "lst"))
(define-prim "string->list" (varparam "lst"))
(define-prim "random" (varparam "lst"))
(define-prim "car" (varparam "lst"))
(define-prim ">=" (varparam "lst"))
(define-prim "hash-keys" (varparam "lst"))
(define-prim "/" (varparam "lst"))
(define-prim "set-count" (varparam "lst"))
(define-prim "null?" (varparam "lst"))
(define-prim "set->list" (varparam "lst"))
(define-prim "exact-floor" (varparam "lst"))
(define-prim "*" (varparam "lst"))
(define-prim "hash" (varparam "lst"))
(define-prim "set" (varparam "lst"))
(define-prim "exact-ceiling" (varparam "lst"))
(define-prim "positive?" (varparam "lst"))
(define-prim "<=" (varparam "lst"))
(define-prim "string?" (varparam "lst"))
(define-prim "string-append" (varparam "lst"))
(define-prim "sqrt" (varparam "lst"))
(define-prim "set-member?" (varparam "lst"))
(define-prim "substring" (varparam "lst"))
(define-prim "expt" (varparam "lst"))
(define-prim "set-add" (varparam "lst"))
(define-prim "list" (varparam "lst"))
(define-prim "remainder" (varparam "lst"))
(define-prim ">" (varparam "lst"))
(define-prim "min" (varparam "lst"))
(define-prim "hash-has-key?" (varparam "lst"))
(define-prim "set-remove" (varparam "lst"))
(define-prim "abs" (varparam "lst"))
(define-prim "negative?" (varparam "lst"))
(define-prim "hash-ref" (varparam "lst"))
(define-prim "hash-set" (varparam "lst"))
(define-prim "pair?" (varparam "lst"))
(define-prim "hash-count" (varparam "lst"))
(define-prim "eq?" (varparam "lst"))
(define-prim "modulo" (varparam "lst"))
(define-prim "quotient" (varparam "lst"))
(define-prim "equal?" (varparam "lst"))
(define-prim "cdr" (varparam "lst"))
(define-prim "-" (varparam "lst"))
(define-prim "+" (varparam "lst"))
(define-prim "=" (varparam "lst"))
(define-prim "cons" (varparam "lst"))
(define-prim "string-ref" (varparam "lst"))
(define-prim "exact-round" (varparam "lst"))
(define-prim "<" (varparam "lst"))
(define-prim "max" (varparam "lst"))
(define-prim "string-length" (varparam "lst"))
(fixedarg ($lst (f-addr ($nil 0) (int "1")) ($nil 0)))
(fixedarg ($lst (f-addr ($nil 0) (int "1")) ($lst (f-addr ($nil 0) (int "2")) ($nil 0))))


(f-addr ($nil 0) "float->int")
(f-addr ($nil 0) "symbol?")
(f-addr ($nil 0) "list->set")
(f-addr ($nil 0) "int->float")
(f-addr ($nil 0) "string->list")
(f-addr ($nil 0) "random")
(f-addr ($nil 0) "car")
(f-addr ($nil 0) ">=")
(f-addr ($nil 0) "hash-keys")
(f-addr ($nil 0) "/")
(f-addr ($nil 0) "set-count")
(f-addr ($nil 0) "null?")
(f-addr ($nil 0) "set->list")
(f-addr ($nil 0) "exact-floor")
(f-addr ($nil 0) "*")
(f-addr ($nil 0) "hash")
(f-addr ($nil 0) "set")
(f-addr ($nil 0) "exact-ceiling")
(f-addr ($nil 0) "positive?")
(f-addr ($nil 0) "<=")
(f-addr ($nil 0) "string?")
(f-addr ($nil 0) "string-append")
(f-addr ($nil 0) "sqrt")
(f-addr ($nil 0) "brouhaha_main")
(f-addr ($nil 0) "set-member?")
(f-addr ($nil 0) "substring")
(f-addr ($nil 0) "expt")
(f-addr ($nil 0) "set-add")
(f-addr ($nil 0) "call")
(f-addr ($nil 0) "list")
(f-addr ($nil 0) "remainder")
(f-addr ($nil 0) ">")
(f-addr ($nil 0) "min")
(f-addr ($nil 0) "hash-has-key?")
(f-addr ($nil 0) "set-remove")
(f-addr ($nil 0) "abs")
(f-addr ($nil 0) "negative?")
(f-addr ($nil 0) "hash-ref")
(f-addr ($nil 0) "hash-set")
(f-addr ($nil 0) "pair?")
(f-addr ($nil 0) "hash-count")
(f-addr ($nil 0) "eq?")
(f-addr ($nil 0) "modulo")
(f-addr ($nil 0) "quotient")
(f-addr ($nil 0) "equal?")
(f-addr ($nil 0) "cdr")
(f-addr ($nil 0) "-")
(f-addr ($nil 0) "+")
(f-addr ($nil 0) "=")
(f-addr ($nil 0) "cons")
(f-addr ($nil 0) "string-ref")
(f-addr ($nil 0) "exact-round")
(f-addr ($nil 0) "<")
(f-addr ($nil 0) "max")
(f-addr ($nil 0) "string-length")
(f-addr ($nil 0) (int "1"))
(f-addr ($nil 0) (int "2"))
(f-addr ($lst (app (ref "call") ($lst (int "1") ($nil 0))) ($nil 0)) "x")
(f-addr ($lst (app (ref "call") ($lst (int "1") ($nil 0))) ($nil 0)) "+")
(eval (int "1") ($nil 0) (appk (app (ref "call") ($lst (int "1") ($nil 0))) ($lst (f-addr ($nil 0) "call") ($nil 0)) ($nil 0) ($nil 0) (halt )))
(eval (int "1") ($nil 0) (appk (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))) ($lst (f-addr ($nil 0) "+") ($nil 0)) ($lst (int "2") ($nil 0)) ($nil 0) (k-addr (app (ref "+") ($lst (int "1") ($lst (int #int_1) ($nil #$nil_0)))))))
(eval (int "2") ($nil 0) (appk (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))) ($lst (f-addr ($nil 0) "+") ($lst (f-addr ($nil 0) (int "1")) ($nil 0))) ($nil 0) ($nil 0) (k-addr (app (ref "+") ($lst (int "1") ($lst (int #int_1) ($nil #$nil_0)))))))
(eval (ref "call") ($nil 0) (appk (app (ref "call") ($lst (int "1") ($nil 0))) ($nil 0) ($lst (int "1") ($nil 0)) ($nil 0) (halt )))
(eval (ref "+") ($nil 0) (appk (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))) ($nil 0) ($lst (int "1") ($lst (int "2") ($nil 0))) ($nil 0) (k-addr (app (ref "+") ($lst (int "1") ($lst (int #int_1) ($nil #$nil_0)))))))
(eval (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))) ($nil 0) (k-addr (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0))))))
(eval (app (ref "call") ($lst (int "1") ($nil 0))) ($nil 0) (halt ))

(answer (ret (s-addr (apply (app (ref "+") ($lst (int #int_0) ($lst #$lst_3))) ($nil 0) (define-prim "+" (varparam "lst")) (fixedarg ($lst (f-addr #f-addr_55) ($lst #$lst_19))) (k-addr (app (ref #ref_1) ($lst #$lst_12))))) (halt )) (state (apply (app (ref "+") ($lst (int "1") ($lst (int #int_1) ($nil #$nil_0)))) ($nil 0) (define-prim "+" (varparam "lst")) (fixedarg ($lst (f-addr ($nil #$nil_0) (int #int_0)) ($lst (f-addr #f-addr_58) ($nil #$nil_0)))) (k-addr (app (ref "+") ($lst (int #int_0) ($lst #$lst_3)))))))
(store-flow (f-addr ($nil 0) (int "1")) (f-addr ($lst (app (ref "call") ($lst (int "1") ($nil 0))) ($nil 0)) "x"))
(store-flow (f-addr ($lst (app (ref "call") ($lst (int "1") ($nil 0))) ($nil 0)) "+") (f-addr ($nil 0) "+"))


(appk (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))) ($nil 0) ($lst (int "1") ($lst (int "2") ($nil 0))) ($nil 0) (k-addr (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0))))))
(appk (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))) ($lst (f-addr ($nil 0) "+") ($nil 0)) ($lst (int "2") ($nil 0)) ($nil 0) (k-addr (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0))))))
(appk (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))) ($lst (f-addr ($nil 0) "+") ($lst (f-addr ($nil 0) (int "1")) ($nil 0))) ($nil 0) ($nil 0) (k-addr (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0))))))
(appk (app (ref "call") ($lst (int "1") ($nil 0))) ($nil 0) ($lst (int "1") ($nil 0)) ($nil 0) (halt ))
(appk (app (ref "call") ($lst (int "1") ($nil 0))) ($lst (f-addr ($nil 0) "call") ($nil 0)) ($nil 0) ($nil 0) (halt ))


(tick (do-tick ($nil 0) (app (ref "call") ($lst (int "1") ($nil 0)))) ($lst (app (ref "call") ($lst (int "1") ($nil 0))) ($nil 0)))

(do-fixed-prop-all ($lst (app (ref "call") ($lst (int "1") ($nil 0))) ($nil 0)) ($nil 0) ($nil 0))
(do-fixed-prop-all ($lst (app (ref "call") ($lst (int "1") ($nil 0))) ($nil 0)) ($lst "x" ($nil 0)) ($lst (f-addr ($nil 0) (int "1")) ($nil 0)))

(s-addr (apply (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))) ($nil 0) (define-prim "+" (varparam "lst")) (fixedarg ($lst (f-addr ($nil 0) (int "1")) ($lst (f-addr ($nil #$nil_0) (int #int_1)) ($nil 0)))) (k-addr (app (ref "+") ($lst (int "1") ($lst (int #int_1) ($nil #$nil_0)))))))
(specialized-prim "car")
(specialized-prim "null?")
(specialized-prim "list")
(specialized-prim "cdr")
(specialized-prim "cons")
(varparam "lst")

(do-free-app (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))) ($nil 0))
(do-free-app (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))) ($lst (int "2") ($nil 0)))
(do-free-app (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))) ($lst (int "1") ($lst (int "2") ($nil 0))))
(do-free-app (app (ref "call") ($lst (int "1") ($nil 0))) ($nil 0))
(do-free-app (app (ref "call") ($lst (int "1") ($nil 0))) ($lst (int "1") ($nil 0)))

(length-input ($nil 0))
(int "1")
(int "2")
(store (k-addr (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0))))) (halt ))
(store (f-addr ($nil 0) "string-append") (define-prim "string-append" (varparam "lst")))
(store (f-addr ($nil 0) "/") (define-prim "/" (varparam "lst")))
(store (f-addr ($nil 0) "list->set") (define-prim "list->set" (varparam "lst")))
(store (f-addr ($nil 0) "positive?") (define-prim "positive?" (varparam "lst")))
(store (f-addr ($nil 0) "call") (define "call" (fixedparam ($lst "x" ($nil 0))) (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0))))))
(store (f-addr ($nil 0) "hash-ref") (define-prim "hash-ref" (varparam "lst")))
(store (f-addr ($nil 0) "hash") (define-prim "hash" (varparam "lst")))
(store (f-addr ($nil 0) "pair?") (define-prim "pair?" (varparam "lst")))
(store (f-addr ($nil 0) "min") (define-prim "min" (varparam "lst")))
(store (f-addr ($nil 0) "int->float") (define-prim "int->float" (varparam "lst")))
(store (f-addr ($nil 0) "-") (define-prim "-" (varparam "lst")))
(store (f-addr ($nil 0) "<=") (define-prim "<=" (varparam "lst")))
(store (f-addr ($nil 0) "set-add") (define-prim "set-add" (varparam "lst")))
(store (f-addr ($nil 0) "hash-set") (define-prim "hash-set" (varparam "lst")))
(store (f-addr ($nil 0) "+") (define-prim "+" (varparam "lst")))
(store (f-addr ($nil 0) "list") (define-prim "list" (varparam "lst")))
(store (f-addr ($nil 0) "equal?") (define-prim "equal?" (varparam "lst")))
(store (f-addr ($nil 0) "float->int") (define-prim "float->int" (varparam "lst")))
(store (f-addr ($nil 0) "string-length") (define-prim "string-length" (varparam "lst")))
(store (f-addr ($nil 0) "set-member?") (define-prim "set-member?" (varparam "lst")))
(store (f-addr ($nil 0) "cdr") (define-prim "cdr" (varparam "lst")))
(store (f-addr ($nil 0) "=") (define-prim "=" (varparam "lst")))
(store (f-addr ($nil 0) "symbol?") (define-prim "symbol?" (varparam "lst")))
(store (f-addr ($nil 0) "<") (define-prim "<" (varparam "lst")))
(store (f-addr ($nil 0) "sqrt") (define-prim "sqrt" (varparam "lst")))
(store (f-addr ($nil 0) "exact-round") (define-prim "exact-round" (varparam "lst")))
(store (f-addr ($nil 0) ">=") (define-prim ">=" (varparam "lst")))
(store (f-addr ($nil 0) "remainder") (define-prim "remainder" (varparam "lst")))
(store (f-addr ($nil 0) ">") (define-prim ">" (varparam "lst")))
(store (f-addr ($nil 0) "negative?") (define-prim "negative?" (varparam "lst")))
(store (f-addr ($nil 0) "exact-floor") (define-prim "exact-floor" (varparam "lst")))
(store (f-addr ($nil 0) "hash-keys") (define-prim "hash-keys" (varparam "lst")))
(store (f-addr ($nil 0) "modulo") (define-prim "modulo" (varparam "lst")))
(store (f-addr ($nil 0) "substring") (define-prim "substring" (varparam "lst")))
(store (f-addr ($nil 0) "set-remove") (define-prim "set-remove" (varparam "lst")))
(store (f-addr ($nil 0) "abs") (define-prim "abs" (varparam "lst")))
(store (f-addr ($nil 0) "expt") (define-prim "expt" (varparam "lst")))
(store (f-addr ($nil 0) "eq?") (define-prim "eq?" (varparam "lst")))
(store (f-addr ($nil 0) "set-count") (define-prim "set-count" (varparam "lst")))
(store (f-addr ($nil 0) "string->list") (define-prim "string->list" (varparam "lst")))
(store (f-addr ($nil 0) "set") (define-prim "set" (varparam "lst")))
(store (f-addr ($nil 0) "set->list") (define-prim "set->list" (varparam "lst")))
(store (f-addr ($nil 0) "exact-ceiling") (define-prim "exact-ceiling" (varparam "lst")))
(store (f-addr ($nil 0) "quotient") (define-prim "quotient" (varparam "lst")))
(store (f-addr ($nil 0) "hash-has-key?") (define-prim "hash-has-key?" (varparam "lst")))
(store (f-addr ($nil 0) "string-ref") (define-prim "string-ref" (varparam "lst")))
(store (f-addr ($nil 0) "*") (define-prim "*" (varparam "lst")))
(store (f-addr ($nil 0) "cons") (define-prim "cons" (varparam "lst")))
(store (f-addr ($nil 0) "null?") (define-prim "null?" (varparam "lst")))
(store (f-addr ($nil 0) "string?") (define-prim "string?" (varparam "lst")))
(store (f-addr ($nil 0) "max") (define-prim "max" (varparam "lst")))
(store (f-addr ($nil 0) "car") (define-prim "car" (varparam "lst"))
(store (f-addr ($nil 0) "hash-count") (define-prim "hash-count" (varparam "lst")))
(store (f-addr ($nil 0) "random") (define-prim "random" (varparam "lst")))
(store (f-addr ($nil 0) "brouhaha_main") (define "brouhaha_main" (fixedparam ($nil 0)) (app (ref "call") ($lst (int "1") ($nil 0)))))
(store (f-addr ($nil 0) (int "1")) (int-val "1"))
(store (f-addr ($lst (app (ref "call") ($lst (int "1") ($nil 0))) ($nil 0)) "x") (int-val "1"))
(store (f-addr ($nil 0) (int "2")) (int-val "2"))
(store (s-addr (apply (app (ref "+") ($lst (int "1") ($lst (int #int_1) ($nil #$nil_0)))) ($nil 0) (define-prim "+" (varparam "lst")) (fixedarg ($lst (f-addr ($nil #$nil_0) (int #int_0)) ($lst (f-addr #f-addr_58) ($nil #$nil_0)))) (k-addr (app (ref "+") ($lst (int #int_0) ($lst #$lst_3)))))) (state (apply (app (ref "+") ($lst (int "1") ($lst (int #int_1) ($nil #$nil_0)))) ($nil 0) (define-prim "+" (varparam "lst")) (fixedarg ($lst (f-addr ($nil #$nil_0) (int #int_0)) ($lst (f-addr #f-addr_58) ($nil #$nil_0)))) (k-addr (app (ref "+") ($lst (int #int_0) ($lst #$lst_3)))))))

(do-tick ($nil 0) (app (ref "call") ($lst (int "1") ($nil 0))))
(clo (lambda (fixedparam ($lst "x" ($nil 0))) (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0))))) ($nil 0))


(non-list-value (int "1"))
(non-list-value (int "2"))
(non-list-value (state (apply (app (ref "+") ($lst (int "1") ($lst (int #int_1) ($nil #$nil_0)))) ($nil 0) (define-prim "+" (varparam "lst")) (fixedarg ($lst (f-addr ($nil #$nil_0) (int #int_0)) ($lst (f-addr #f-addr_58) ($nil #$nil_0)))) (k-addr (app (ref "+") ($lst (int #int_0) ($lst #$lst_3)))))))
(ref "call")
(ref "+")
(k-addr (app (ref "+") ($lst (int "1") ($lst (int "2") ($nil 0)))))

