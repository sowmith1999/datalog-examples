;; acyclic
;(edge 1 2 1) (edge 2 3 2) (edge 2 4 1)
;(edge 3 5 2) (edge 4 5 1) (edge 5 6 2)
;; Single source shortest path
;; cyclic
(edge 1 2 1) (edge 3 2 2) (edge 2 4 1)
(edge 5 3 2) (edge 4 5 1) (edge 5 6 2)

(member ?(do-member x (nil)) (false))
(member ?(do-member x (list x rst)) (true))
[(member ?(do-member x (list hd rst)) (true)) <-- (=/= hd x) (member !(do-member x rst) (true))]
[(member ?(do-member x (list hd rst)) (false)) <-- (=/= hd x) (member !(do-member x rst) (false))]

[(node a) (node b) <-- (edge a b _)]
(source-node 1)

[(edge from to w) 
    --> (path from to (list to (list from (nil ))) w)]
[(path from mid pt acc-w) (edge mid to w)
    --> (path from to (list to pt) {+ acc-w w})]
[(path from to _ _) (source-node from) 
    --> (shortest-dist from to {minimum path from to _})]
[(shortest-dist from to dist) (path from to pt dist) 
    --> (shortest-path from to pt dist)]
