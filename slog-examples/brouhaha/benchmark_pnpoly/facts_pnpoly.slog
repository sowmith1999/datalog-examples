(store (f-addr [] "+") (define-prim "+" (varparam "lst")))
	(prim-count "+" [1 2 3 ])
(store (f-addr [] "-") (define-prim "-" (varparam "lst")))
	(prim-count "-" [1 2 3 ])
(store (f-addr [] "*") (define-prim "*" (varparam "lst")))
	(prim-count "*" [1 2 3 ])
(store (f-addr [] "/") (define-prim "/" (varparam "lst")))
	(prim-count "/" [1 2 3 ])
(store (f-addr [] "=") (define-prim "=" (varparam "lst")))
	(prim-count "=" [1 2 3 ])
(store (f-addr [] ">") (define-prim ">" (varparam "lst")))
	(prim-count ">" [1 2 3 ])
(store (f-addr [] "<") (define-prim "<" (varparam "lst")))
	(prim-count "<" [1 2 3 ])
(store (f-addr [] "<=") (define-prim "<=" (varparam "lst")))
	(prim-count "<=" [1 2 3 ])
(store (f-addr [] ">=") (define-prim ">=" (varparam "lst")))
	(prim-count ">=" [1 2 3 ])
(store (f-addr [] "modulo") (define-prim "modulo" (varparam "lst")))
	(prim-count "modulo" [2 ])
(store (f-addr [] "null?") (define-prim "null?" (varparam "lst")))
	(prim-count "null?" [1 ])
(store (f-addr [] "equal?") (define-prim "equal?" (varparam "lst")))
	(prim-count "equal?" [2 ])
(store (f-addr [] "eq?") (define-prim "eq?" (varparam "lst")))
	(prim-count "eq?" [2 ])
(store (f-addr [] "cons") (define-prim "cons" (varparam "lst")))
	(prim-count "cons" [2 ])
(store (f-addr [] "car") (define-prim "car" (varparam "lst")))
	(prim-count "car" [1 ])
(store (f-addr [] "cdr") (define-prim "cdr" (varparam "lst")))
	(prim-count "cdr" [1 ])
(store (f-addr [] "float->int") (define-prim "float->int" (varparam "lst")))
	(prim-count "float->int" [1 ])
(store (f-addr [] "int->float") (define-prim "int->float" (varparam "lst")))
	(prim-count "int->float" [1 ])
(store (f-addr [] "hash") (define-prim "hash" (varparam "lst")))
	(prim-count "hash" [])
(store (f-addr [] "hash-ref") (define-prim "hash-ref" (varparam "lst")))
	(prim-count "hash-ref" [2 ])
(store (f-addr [] "hash-set") (define-prim "hash-set" (varparam "lst")))
	(prim-count "hash-set" [3 ])
(store (f-addr [] "hash-keys") (define-prim "hash-keys" (varparam "lst")))
	(prim-count "hash-keys" [1 ])
(store (f-addr [] "hash-has-key?") (define-prim "hash-has-key?" (varparam "lst")))
	(prim-count "hash-has-key?" [2 ])
(store (f-addr [] "hash-count") (define-prim "hash-count" (varparam "lst")))
	(prim-count "hash-count" [1 ])
(store (f-addr [] "set") (define-prim "set" (varparam "lst")))
	(prim-count "set" [])
(store (f-addr [] "set->list") (define-prim "set->list" (varparam "lst")))
	(prim-count "set->list" [1 ])
(store (f-addr [] "list->set") (define-prim "list->set" (varparam "lst")))
	(prim-count "list->set" [1 ])
(store (f-addr [] "set-add") (define-prim "set-add" (varparam "lst")))
	(prim-count "set-add" [2 ])
(store (f-addr [] "set-member?") (define-prim "set-member?" (varparam "lst")))
	(prim-count "set-member?" [2 ])
(store (f-addr [] "set-remove") (define-prim "set-remove" (varparam "lst")))
	(prim-count "set-remove" [2 ])
(store (f-addr [] "set-count") (define-prim "set-count" (varparam "lst")))
	(prim-count "set-count" [1 ])
(store (f-addr [] "string?") (define-prim "string?" (varparam "lst")))
	(prim-count "string?" [1 ])
(store (f-addr [] "string-length") (define-prim "string-length" (varparam "lst")))
	(prim-count "string-length" [1 ])
(store (f-addr [] "string-ref") (define-prim "string-ref" (varparam "lst")))
	(prim-count "string-ref" [2 ])
(store (f-addr [] "substring") (define-prim "substring" (varparam "lst")))
	(prim-count "substring" [3 ])
(store (f-addr [] "string-append") (define-prim "string-append" (varparam "lst")))
	(prim-count "string-append" [2 ])
(store (f-addr [] "string->list") (define-prim "string->list" (varparam "lst")))
	(prim-count "string->list" [1 ])
(store (f-addr [] "exact-floor") (define-prim "exact-floor" (varparam "lst")))
	(prim-count "exact-floor" [1 ])
(store (f-addr [] "exact-ceiling") (define-prim "exact-ceiling" (varparam "lst")))
	(prim-count "exact-ceiling" [1 ])
(store (f-addr [] "exact-round") (define-prim "exact-round" (varparam "lst")))
	(prim-count "exact-round" [1 ])
(store (f-addr [] "abs") (define-prim "abs" (varparam "lst")))
	(prim-count "abs" [1 ])
(store (f-addr [] "max") (define-prim "max" (varparam "lst")))
	(prim-count "max" [1 ])
(store (f-addr [] "min") (define-prim "min" (varparam "lst")))
	(prim-count "min" [1 ])
(store (f-addr [] "expt") (define-prim "expt" (varparam "lst")))
	(prim-count "expt" [2 ])
(store (f-addr [] "sqrt") (define-prim "sqrt" (varparam "lst")))
	(prim-count "sqrt" [1 ])
(store (f-addr [] "remainder") (define-prim "remainder" (varparam "lst")))
	(prim-count "remainder" [2 ])
(store (f-addr [] "quotient") (define-prim "quotient" (varparam "lst")))
	(prim-count "quotient" [2 ])
(store (f-addr [] "random") (define-prim "random" (varparam "lst")))
	(prim-count "random" [1 2 ])
(store (f-addr [] "symbol?") (define-prim "symbol?" (varparam "lst")))
	(prim-count "symbol?" [1 ])
(store (f-addr [] "pair?") (define-prim "pair?" (varparam "lst")))
	(prim-count "pair?" [1 ])
(store (f-addr [] "positive?") (define-prim "positive?" (varparam "lst")))
	(prim-count "positive?" [1 ])
(store (f-addr [] "negative?") (define-prim "negative?" (varparam "lst")))
	(prim-count "negative?" [1 ])
(store (f-addr [] "list") (define-prim "list" (varparam "lst")))
	(prim-count "list" [1 2 3 4 ])
(store (f-addr [] "list-ref") (define "list-ref" (fixedparam ["lst" "n" ]) (if (app (ref "=") [(int "0")(ref "n")]) (app (ref "car") [(ref "lst")]) (app (ref "list-ref") [(app (ref "cdr") [(ref "lst")])(app (ref "-") [(ref "n")(int "1")])]))))
(store (f-addr [] "length") (define "length" (fixedparam ["lst" ]) (if (app (ref "null?") [(ref "lst")]) (int "0") (app (ref "+") [(int "1")(app (ref "length") [(app (ref "cdr") [(ref "lst")])])]))))
(store (f-addr [] "foldl") (define "foldl" (fixedparam ["fun" "acc" "lst" ]) (if (app (ref "null?") [(ref "lst")]) (ref "acc") (app (ref "foldl") [(ref "fun")(app (ref "fun") [(app (ref "car") [(ref "lst")])(ref "acc")])(app (ref "cdr") [(ref "lst")])]))))
(store (f-addr [] "pt-in-poly2-helper") (define "pt-in-poly2-helper" (fixedparam ["xp" "yp" "x" "y" "c" "i" "j" ]) (if (app (ref "<") [(ref "i")(int "0")]) (ref "c") (if (if (if (if (app (ref ">") [(app (ref "list-ref") [(ref "yp")(ref "i")])(ref "y")]) (app (ref ">") [(app (ref "list-ref") [(ref "yp")(ref "i")])(ref "y")]) (app (ref ">=") [(ref "y")(app (ref "list-ref") [(ref "yp")(ref "j")])])) (if (app (ref ">") [(app (ref "list-ref") [(ref "yp")(ref "j")])(ref "y")]) (app (ref ">") [(app (ref "list-ref") [(ref "yp")(ref "j")])(ref "y")]) (app (ref ">=") [(ref "y")(app (ref "list-ref") [(ref "yp")(ref "i")])])) (bool "f")) (if (if (app (ref ">") [(app (ref "list-ref") [(ref "yp")(ref "i")])(ref "y")]) (app (ref ">") [(app (ref "list-ref") [(ref "yp")(ref "i")])(ref "y")]) (app (ref ">=") [(ref "y")(app (ref "list-ref") [(ref "yp")(ref "j")])])) (if (app (ref ">") [(app (ref "list-ref") [(ref "yp")(ref "j")])(ref "y")]) (app (ref ">") [(app (ref "list-ref") [(ref "yp")(ref "j")])(ref "y")]) (app (ref ">=") [(ref "y")(app (ref "list-ref") [(ref "yp")(ref "i")])])) (bool "f")) (app (ref ">=") [(ref "x")(app (ref "+") [(app (ref "list-ref") [(ref "xp")(ref "i")])(app (ref "/") [(app (ref "*") [(app (ref "-") [(app (ref "list-ref") [(ref "xp")(ref "j")])(app (ref "list-ref") [(ref "xp")(ref "i")])])(app (ref "-") [(ref "y")(app (ref "list-ref") [(ref "yp")(ref "i")])])])(app (ref "-") [(app (ref "list-ref") [(ref "yp")(ref "j")])(app (ref "list-ref") [(ref "yp")(ref "i")])])])])])) (app (ref "pt-in-poly2-helper") [(ref "xp")(ref "yp")(ref "x")(ref "y")(ref "c")(app (ref "-") [(ref "i")(int "1")])(ref "i")]) (app (ref "pt-in-poly2-helper") [(ref "xp")(ref "yp")(ref "x")(ref "y")(if (ref "c") (bool "f") (bool "t"))(app (ref "-") [(ref "i")(int "1")])(ref "i")])))))
(store (f-addr [] "pt-in-poly2") (define "pt-in-poly2" (fixedparam ["xp" "yp" "x" "y" ]) (app (ref "pt-in-poly2-helper") [(ref "xp")(ref "yp")(ref "x")(ref "y")(bool "f")(app (ref "-") [(app (ref "length") [(ref "xp")])(int "1")])(int "0")])))
(store (f-addr [] "run") (define "run" (fixedparam ["input1" "input2" ]) (app (ref "foldl") [(lambda (fixedparam ["lst""count"]) (if (app (ref "pt-in-poly2") [(ref "input1")(ref "input2")(app (ref "car") [(ref "lst")])(app (ref "car") [(app (ref "cdr") [(ref "lst")])])]) (app (ref "+") [(ref "count")(int "1")]) (ref "count")))(int "0")(app (ref "list") [(app (ref "list") [(int "0.5")(int "0.5")])(app (ref "list") [(int "0.5")(int "1.5")])(app (ref "list") [(int "-0.5")(int "1.5")])(app (ref "list") [(int "0.75")(int "2.25")])(app (ref "list") [(int "0.0")(int "2.01")])(app (ref "list") [(int "-0.5")(int "2.5")])(app (ref "list") [(int "-1.0")(int "-0.5")])(app (ref "list") [(int "-1.5")(int "0.5")])(app (ref "list") [(int "-2.25")(int "-1.0")])(app (ref "list") [(int "0.5")(int "-0.25")])(app (ref "list") [(int "0.5")(int "-1.25")])(app (ref "list") [(int "-0.5")(int "-2.5")])])])))
(store (f-addr [] "brouhaha_main") (define "brouhaha_main" (fixedparam []) (app (ref "run") [(app (ref "list") [(int "0.0")(int "1.0")(int "1.0")(int "0.0")(int "0.0")(int "1.0")(int "-0.5")(int "-1.0")(int "-1.0")(int "-2.0")(int "-2.5")(int "-2.0")(int "-1.5")(int "-0.5")(int "1.0")(int "1.0")(int "0.0")(int "-0.5")(int "-1.0")(int "-0.5")])(app (ref "list") [(int "0.0")(int "0.0")(int "1.0")(int "1.0")(int "2.0")(int "3.0")(int "2.0")(int "3.0")(int "0.0")(int "-0.5")(int "-1.0")(int "-1.5")(int "-2.0")(int "-2.0")(int "-1.5")(int "-1.0")(int "-0.5")(int "-1.0")(int "-1.0")(int "-0.5")])])))

