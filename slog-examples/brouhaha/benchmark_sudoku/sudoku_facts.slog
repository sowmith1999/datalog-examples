(store (f-addr [] "+") (define-prim "+" (varparam "lst")))
	(prim-count "+" [1 2 3 ])
(store (f-addr [] "-") (define-prim "-" (varparam "lst")))
	(prim-count "-" [1 2 3 ])
(store (f-addr [] "*") (define-prim "*" (varparam "lst")))
	(prim-count "*" [1 2 3 ])
(store (f-addr [] "/") (define-prim "/" (varparam "lst")))
	(prim-count "/" [1 2 3 ])
(store (f-addr [] "=") (define-prim "=" (varparam "lst")))
	(prim-count "=" [1 2 3 ])
(store (f-addr [] ">") (define-prim ">" (varparam "lst")))
	(prim-count ">" [1 2 3 ])
(store (f-addr [] "<") (define-prim "<" (varparam "lst")))
	(prim-count "<" [1 2 3 ])
(store (f-addr [] "<=") (define-prim "<=" (varparam "lst")))
	(prim-count "<=" [1 2 3 ])
(store (f-addr [] ">=") (define-prim ">=" (varparam "lst")))
	(prim-count ">=" [1 2 3 ])
(store (f-addr [] "modulo") (define-prim "modulo" (varparam "lst")))
	(prim-count "modulo" [2 ])
(store (f-addr [] "null?") (define-prim "null?" (varparam "lst")))
	(prim-count "null?" [1 ])
(store (f-addr [] "equal?") (define-prim "equal?" (varparam "lst")))
	(prim-count "equal?" [2 ])
(store (f-addr [] "eq?") (define-prim "eq?" (varparam "lst")))
	(prim-count "eq?" [2 ])
(store (f-addr [] "cons") (define-prim "cons" (varparam "lst")))
	(prim-count "cons" [2 ])
(store (f-addr [] "car") (define-prim "car" (varparam "lst")))
	(prim-count "car" [1 ])
(store (f-addr [] "cdr") (define-prim "cdr" (varparam "lst")))
	(prim-count "cdr" [1 ])
(store (f-addr [] "float->int") (define-prim "float->int" (varparam "lst")))
	(prim-count "float->int" [1 ])
(store (f-addr [] "int->float") (define-prim "int->float" (varparam "lst")))
	(prim-count "int->float" [1 ])
(store (f-addr [] "hash") (define-prim "hash" (varparam "lst")))
	(prim-count "hash" [])
(store (f-addr [] "hash-ref") (define-prim "hash-ref" (varparam "lst")))
	(prim-count "hash-ref" [2 ])
(store (f-addr [] "hash-set") (define-prim "hash-set" (varparam "lst")))
	(prim-count "hash-set" [3 ])
(store (f-addr [] "hash-keys") (define-prim "hash-keys" (varparam "lst")))
	(prim-count "hash-keys" [1 ])
(store (f-addr [] "hash-has-key?") (define-prim "hash-has-key?" (varparam "lst")))
	(prim-count "hash-has-key?" [2 ])
(store (f-addr [] "hash-count") (define-prim "hash-count" (varparam "lst")))
	(prim-count "hash-count" [1 ])
(store (f-addr [] "set") (define-prim "set" (varparam "lst")))
	(prim-count "set" [])
(store (f-addr [] "set->list") (define-prim "set->list" (varparam "lst")))
	(prim-count "set->list" [1 ])
(store (f-addr [] "list->set") (define-prim "list->set" (varparam "lst")))
	(prim-count "list->set" [1 ])
(store (f-addr [] "set-add") (define-prim "set-add" (varparam "lst")))
	(prim-count "set-add" [2 ])
(store (f-addr [] "set-member?") (define-prim "set-member?" (varparam "lst")))
	(prim-count "set-member?" [2 ])
(store (f-addr [] "set-remove") (define-prim "set-remove" (varparam "lst")))
	(prim-count "set-remove" [2 ])
(store (f-addr [] "set-count") (define-prim "set-count" (varparam "lst")))
	(prim-count "set-count" [1 ])
(store (f-addr [] "string?") (define-prim "string?" (varparam "lst")))
	(prim-count "string?" [1 ])
(store (f-addr [] "string-length") (define-prim "string-length" (varparam "lst")))
	(prim-count "string-length" [1 ])
(store (f-addr [] "string-ref") (define-prim "string-ref" (varparam "lst")))
	(prim-count "string-ref" [2 ])
(store (f-addr [] "substring") (define-prim "substring" (varparam "lst")))
	(prim-count "substring" [3 ])
(store (f-addr [] "string-append") (define-prim "string-append" (varparam "lst")))
	(prim-count "string-append" [2 ])
(store (f-addr [] "string->list") (define-prim "string->list" (varparam "lst")))
	(prim-count "string->list" [1 ])
(store (f-addr [] "exact-floor") (define-prim "exact-floor" (varparam "lst")))
	(prim-count "exact-floor" [1 ])
(store (f-addr [] "exact-ceiling") (define-prim "exact-ceiling" (varparam "lst")))
	(prim-count "exact-ceiling" [1 ])
(store (f-addr [] "exact-round") (define-prim "exact-round" (varparam "lst")))
	(prim-count "exact-round" [1 ])
(store (f-addr [] "abs") (define-prim "abs" (varparam "lst")))
	(prim-count "abs" [1 ])
(store (f-addr [] "max") (define-prim "max" (varparam "lst")))
	(prim-count "max" [1 ])
(store (f-addr [] "min") (define-prim "min" (varparam "lst")))
	(prim-count "min" [1 ])
(store (f-addr [] "expt") (define-prim "expt" (varparam "lst")))
	(prim-count "expt" [2 ])
(store (f-addr [] "sqrt") (define-prim "sqrt" (varparam "lst")))
	(prim-count "sqrt" [1 ])
(store (f-addr [] "remainder") (define-prim "remainder" (varparam "lst")))
	(prim-count "remainder" [2 ])
(store (f-addr [] "quotient") (define-prim "quotient" (varparam "lst")))
	(prim-count "quotient" [2 ])
(store (f-addr [] "random") (define-prim "random" (varparam "lst")))
	(prim-count "random" [1 2 ])
(store (f-addr [] "symbol?") (define-prim "symbol?" (varparam "lst")))
	(prim-count "symbol?" [1 ])
(store (f-addr [] "pair?") (define-prim "pair?" (varparam "lst")))
	(prim-count "pair?" [1 ])
(store (f-addr [] "positive?") (define-prim "positive?" (varparam "lst")))
	(prim-count "positive?" [1 ])
(store (f-addr [] "negative?") (define-prim "negative?" (varparam "lst")))
	(prim-count "negative?" [1 ])
(store (f-addr [] "list") (define-prim "list" (varparam "lst")))
	(prim-count "list" [1 2 3 4 ])
(store (f-addr [] "list-ref") (define "list-ref" (fixedparam ["lst" "n" ]) (if (app (ref "=") [(int "0")(ref "n")]) (app (ref "car") [(ref "lst")]) (app (ref "list-ref") [(app (ref "cdr") [(ref "lst")])(app (ref "-") [(ref "n")(int "1")])]))))
(store (f-addr [] "member") (define "member" (fixedparam ["item" "lst" ]) (if (if (app (ref "null?") [(ref "item")]) (app (ref "null?") [(ref "item")]) (app (ref "null?") [(ref "lst")])) (bool "f") (if (app (ref "equal?") [(ref "item")(app (ref "car") [(ref "lst")])]) (ref "lst") (app (ref "member") [(ref "item")(app (ref "cdr") [(ref "lst")])])))))
(store (f-addr [] "map") (define "map" (fixedparam ["proc" "lst" ]) (if (app (ref "null?") [(ref "lst")]) (app (ref "list") []) (app (ref "cons") [(app (ref "proc") [(app (ref "car") [(ref "lst")])])(app (ref "map") [(ref "proc")(app (ref "cdr") [(ref "lst")])])]))))
(store (f-addr [] "filter") (define "filter" (fixedparam ["op" "lst" ]) (if (app (ref "null?") [(ref "lst")]) (app (ref "list") []) (if (app (ref "op") [(app (ref "car") [(ref "lst")])]) (app (ref "cons") [(app (ref "car") [(ref "lst")])(app (ref "filter") [(ref "op")(app (ref "cdr") [(ref "lst")])])]) (app (ref "filter") [(ref "op")(app (ref "cdr") [(ref "lst")])])))))
(store (f-addr [] "foldr") (define "foldr" (fixedparam ["fun" "acc" "lst" ]) (if (app (ref "null?") [(ref "lst")]) (ref "acc") (app (ref "fun") [(app (ref "car") [(ref "lst")])(app (ref "foldr") [(ref "fun")(ref "acc")(app (ref "cdr") [(ref "lst")])])]))))
(store (f-addr [] "append1") (define "append1" (fixedparam ["lhs" "rhs" ]) (if (app (ref "null?") [(ref "lhs")]) (ref "rhs") (app (ref "cons") [(app (ref "car") [(ref "lhs")])(app (ref "append1") [(app (ref "cdr") [(ref "lhs")])(ref "rhs")])]))))
(store (f-addr [] "append") (define "append" (varparam "vargs") (let [ (binding "l1" (app (ref "car") [(ref "vargs")])) (binding "vargs8779" (app (ref "cdr") [(ref "vargs")]))] (let [ (binding "l2" (app (ref "car") [(ref "vargs8779")])) (binding "vargs8780" (app (ref "cdr") [(ref "vargs8779")]))] (let [ (binding "lsts" (ref "vargs8780"))] (if (app (ref "null?") [(ref "lsts")]) (app (ref "append1") [(ref "l1")(ref "l2")]) (app (ref "foldr") [(ref "append1")(app (ref "list") [])(app (ref "append1") [(app (ref "list") [(ref "l1")(ref "l2")])(ref "lsts")])])))))))
(store (f-addr [] "list-set") (define "list-set" (fixedparam ["lst" "index" "value" ]) (if (app (ref "=") [(ref "index")(int "0")]) (app (ref "cons") [(ref "value")(app (ref "cdr") [(ref "lst")])]) (app (ref "cons") [(app (ref "car") [(ref "lst")])(app (ref "list-set") [(app (ref "cdr") [(ref "lst")])(app (ref "-") [(ref "index")(int "1")])(ref "value")])]))))
(store (f-addr [] "flatten") (define "flatten" (fixedparam ["lst" ]) (if (app (ref "null?") [(ref "lst")]) (app (ref "list") []) (if (app (ref "pair?") [(ref "lst")]) (app (ref "append") [(app (ref "flatten") [(app (ref "car") [(ref "lst")])])(app (ref "flatten") [(app (ref "cdr") [(ref "lst")])])]) (app (ref "list") [(ref "lst")])))))
(store (f-addr [] "ll") (define "ll" (fixedparam []) (app (ref "list") [(app (ref "list") [(int "0")(int "1")(int "2")])(app (ref "list") [(int "3")(int "4")(int "5")])(app (ref "list") [(int "6")(int "7")(int "8")])])))
(store (f-addr [] "get-element") (define "get-element" (fixedparam ["brd" "i" "j" ]) (app (ref "list-ref") [(app (ref "list-ref") [(ref "brd")(ref "i")])(ref "j")])))
(store (f-addr [] "generate-pairs") (define "generate-pairs" (fixedparam ["rr" "cc" ]) (app (ref "foldr") [(lambda (fixedparam ["r""acc"]) (app (ref "append") [(app (ref "map") [(lambda (fixedparam ["c"]) (app (ref "list") [(ref "r")(ref "c")]))(ref "cc")])(ref "acc")]))(app (ref "list") [])(ref "rr")])))
(store (f-addr [] "access-elements") (define "access-elements" (fixedparam ["rr" "cc" "brd" ]) (app (ref "map") [(lambda (fixedparam ["pair"]) (app (ref "get-element") [(ref "brd")(app (ref "car") [(ref "pair")])(app (ref "car") [(app (ref "cdr") [(ref "pair")])])]))(app (ref "generate-pairs") [(ref "rr")(ref "cc")])])))
(store (f-addr [] "subgrid") (define "subgrid" (fixedparam ["brd" "r" "c" ]) (let [ (binding "rr" (app (ref "flatten") [(app (ref "filter") [(lambda (fixedparam ["x"]) (app (ref "member") [(ref "r")(ref "x")]))(app (ref "ll") [])])])) (binding "cc" (app (ref "flatten") [(app (ref "filter") [(lambda (fixedparam ["x"]) (app (ref "member") [(ref "c")(ref "x")]))(app (ref "ll") [])])]))] (app (ref "access-elements") [(ref "rr")(ref "cc")(ref "brd")]))))
(store (f-addr [] "newbd") (define "newbd" (fixedparam ["brd" "r" "c" "i" ]) (app (ref "list-set") [(ref "brd")(ref "r")(app (ref "list-set") [(app (ref "list-ref") [(ref "brd")(ref "r")])(ref "c")(ref "i")])])))
(store (f-addr [] "solve-board") (define "solve-board" (fixedparam ["brd" "r" "c" "lst" "result" ]) (if (app (ref "equal?") [(ref "result")(symbol "solved")]) (ref "result") (if (app (ref "null?") [(ref "lst")]) (ref "result") (if (if (if (app (ref "member") [(app (ref "car") [(ref "lst")])(app (ref "list-ref") [(ref "brd")(ref "r")])]) (bool "f") (bool "t")) (if (if (app (ref "member") [(app (ref "car") [(ref "lst")])(app (ref "map") [(lambda (fixedparam ["x"]) (app (ref "list-ref") [(ref "x")(ref "c")]))(ref "brd")])]) (bool "f") (bool "t")) (if (app (ref "member") [(app (ref "car") [(ref "lst")])(app (ref "subgrid") [(ref "brd")(ref "r")(ref "c")])]) (bool "f") (bool "t")) (bool "f")) (bool "f")) (app (ref "solve-board") [(ref "brd")(ref "r")(ref "c")(app (ref "cdr") [(ref "lst")])(let [ (binding "newbrd" (app (ref "newbd") [(ref "brd")(ref "r")(ref "c")(app (ref "car") [(ref "lst")])]))] (if (app (ref "<") [(app (ref "+") [(int "1")(ref "c")])(int "9")]) (app (ref "SolveSudoku") [(ref "newbrd")(ref "r")(app (ref "+") [(int "1")(ref "c")])]) (if (app (ref "<") [(app (ref "+") [(int "1")(ref "r")])(int "9")]) (app (ref "SolveSudoku") [(ref "newbrd")(app (ref "+") [(int "1")(ref "r")])(int "0")]) (symbol "solved"))))]) (app (ref "solve-board") [(ref "brd")(ref "r")(ref "c")(app (ref "cdr") [(ref "lst")])(ref "result")]))))))
(store (f-addr [] "SolveSudoku") (define "SolveSudoku" (fixedparam ["brd" "r" "c" ]) (if (app (ref "=") [(int "0")(app (ref "list-ref") [(app (ref "list-ref") [(ref "brd")(ref "r")])(ref "c")])]) (app (ref "solve-board") [(ref "brd")(ref "r")(ref "c")(app (ref "list") [(int "1")(int "2")(int "3")(int "4")(int "5")(int "6")(int "7")(int "8")(int "9")])(symbol "unsolved")]) (if (app (ref "<") [(app (ref "+") [(int "1")(ref "c")])(int "9")]) (app (ref "SolveSudoku") [(ref "brd")(ref "r")(app (ref "+") [(int "1")(ref "c")])]) (if (app (ref "<") [(app (ref "+") [(int "1")(ref "r")])(int "9")]) (app (ref "SolveSudoku") [(ref "brd")(app (ref "+") [(int "1")(ref "r")])(int "0")]) (symbol "solved"))))))
(store (f-addr [] "board") (define "board" (fixedparam []) (app (ref "list") [(app (ref "list") [(int "5")(int "3")(int "0")(int "0")(int "7")(int "0")(int "0")(int "0")(int "0")])(app (ref "list") [(int "6")(int "0")(int "0")(int "1")(int "9")(int "5")(int "0")(int "0")(int "0")])(app (ref "list") [(int "0")(int "9")(int "8")(int "0")(int "0")(int "0")(int "0")(int "6")(int "0")])(app (ref "list") [(int "8")(int "0")(int "0")(int "0")(int "6")(int "0")(int "0")(int "0")(int "3")])(app (ref "list") [(int "4")(int "0")(int "0")(int "8")(int "0")(int "3")(int "0")(int "0")(int "1")])(app (ref "list") [(int "7")(int "0")(int "0")(int "0")(int "2")(int "0")(int "0")(int "0")(int "6")])(app (ref "list") [(int "0")(int "6")(int "0")(int "0")(int "0")(int "0")(int "2")(int "8")(int "0")])(app (ref "list") [(int "0")(int "0")(int "0")(int "4")(int "1")(int "9")(int "0")(int "0")(int "5")])(app (ref "list") [(int "0")(int "0")(int "0")(int "0")(int "8")(int "0")(int "0")(int "7")(int "9")])])))
(store (f-addr [] "brouhaha_main") (define "brouhaha_main" (fixedparam []) (app (ref "SolveSudoku") [(app (ref "board") [])(int "0")(int "0")])))
(lol "lol")
[(lol "lol") --> (lol "bol")]
