// Declare the edge relation with nodes and weights
.decl edge(from:number, to:number, weight:number)

// Declare a relation to hold the shortest paths and their costs
.decl path(node:number, cost:number, path_list:symbol)
.output path

// Initialize the source node with cost 0 and itself as the path
path(source, 0, cat(source, "")). // `cat` concatenates symbols

// Rule to propagate the shortest path information
path(to, newCost, cat(from, cat("->", to))) :-
    path(from, cost, pathList),
    edge(from, to, weight),
    newCost = cost + weight,
    // Only consider this new path if it's cheaper than any known path to 'to'
    !path(to, oldCost, _),
    newCost < oldCost.

// Input the edges of the graph
edge(1,2,1). edge(2,3,2). edge(2,4,1).
edge(3,5,2). edge(4,5,1). edge(5,6,2).

// Specify the source node
path(1, 0, "1").

